// Code generated by MockGen. DO NOT EDIT.
// Source: data.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/casnerano/seckeep/internal/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDataService is a mock of DataService interface.
type MockDataService struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceMockRecorder
}

// MockDataServiceMockRecorder is the mock recorder for MockDataService.
type MockDataServiceMockRecorder struct {
	mock *MockDataService
}

// NewMockDataService creates a new mock instance.
func NewMockDataService(ctrl *gomock.Controller) *MockDataService {
	mock := &MockDataService{ctrl: ctrl}
	mock.recorder = &MockDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataService) EXPECT() *MockDataServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataService) Create(ctx context.Context, data model.Data) (*model.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(*model.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDataServiceMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataService)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockDataService) Delete(ctx context.Context, userUUID, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userUUID, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataServiceMockRecorder) Delete(ctx, userUUID, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataService)(nil).Delete), ctx, userUUID, uuid)
}

// FindByUUID mocks base method.
func (m *MockDataService) FindByUUID(ctx context.Context, userUUID, uuid string) (*model.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", ctx, userUUID, uuid)
	ret0, _ := ret[0].(*model.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockDataServiceMockRecorder) FindByUUID(ctx, userUUID, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockDataService)(nil).FindByUUID), ctx, userUUID, uuid)
}

// FindByUserUUID mocks base method.
func (m *MockDataService) FindByUserUUID(ctx context.Context, userUUID string) ([]*model.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserUUID", ctx, userUUID)
	ret0, _ := ret[0].([]*model.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserUUID indicates an expected call of FindByUserUUID.
func (mr *MockDataServiceMockRecorder) FindByUserUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserUUID", reflect.TypeOf((*MockDataService)(nil).FindByUserUUID), ctx, userUUID)
}

// Update mocks base method.
func (m *MockDataService) Update(ctx context.Context, userUUID, uuid string, value []byte, version time.Time) (*model.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userUUID, uuid, value, version)
	ret0, _ := ret[0].(*model.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDataServiceMockRecorder) Update(ctx, userUUID, uuid, value, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataService)(nil).Update), ctx, userUUID, uuid, value, version)
}
