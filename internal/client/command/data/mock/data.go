// Code generated by MockGen. DO NOT EDIT.
// Source: data.go

// Package mock_data is a generated GoMock package.
package mock_data

import (
	reflect "reflect"

	model "github.com/casnerano/seckeep/internal/client/model"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(dt model.DataTypeable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), dt)
}

// Delete mocks base method.
func (m *MockService) Delete(index int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", index)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), index)
}

// GetList mocks base method.
func (m *MockService) GetList() map[int]model.DataTypeable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList")
	ret0, _ := ret[0].(map[int]model.DataTypeable)
	return ret0
}

// GetList indicates an expected call of GetList.
func (mr *MockServiceMockRecorder) GetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockService)(nil).GetList))
}

// Read mocks base method.
func (m *MockService) Read(index int) (model.DataTypeable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", index)
	ret0, _ := ret[0].(model.DataTypeable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockServiceMockRecorder) Read(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockService)(nil).Read), index)
}

// Update mocks base method.
func (m *MockService) Update(index int, dt model.DataTypeable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", index, dt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(index, dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), index, dt)
}

// MockSyncerService is a mock of SyncerService interface.
type MockSyncerService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerServiceMockRecorder
}

// MockSyncerServiceMockRecorder is the mock recorder for MockSyncerService.
type MockSyncerServiceMockRecorder struct {
	mock *MockSyncerService
}

// NewMockSyncerService creates a new mock instance.
func NewMockSyncerService(ctrl *gomock.Controller) *MockSyncerService {
	mock := &MockSyncerService{ctrl: ctrl}
	mock.recorder = &MockSyncerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncerService) EXPECT() *MockSyncerServiceMockRecorder {
	return m.recorder
}

// RunWithStatus mocks base method.
func (m *MockSyncerService) RunWithStatus() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunWithStatus")
}

// RunWithStatus indicates an expected call of RunWithStatus.
func (mr *MockSyncerServiceMockRecorder) RunWithStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithStatus", reflect.TypeOf((*MockSyncerService)(nil).RunWithStatus))
}

// ServerHealthErr mocks base method.
func (m *MockSyncerService) ServerHealthErr() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerHealthErr")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerHealthErr indicates an expected call of ServerHealthErr.
func (mr *MockSyncerServiceMockRecorder) ServerHealthErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerHealthErr", reflect.TypeOf((*MockSyncerService)(nil).ServerHealthErr))
}
