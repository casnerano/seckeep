// Code generated by MockGen. DO NOT EDIT.
// Source: create.go

// Package mock_create is a generated GoMock package.
package mock_create

import (
	reflect "reflect"

	model "github.com/casnerano/seckeep/internal/client/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDataService is a mock of DataService interface.
type MockDataService struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceMockRecorder
}

// MockDataServiceMockRecorder is the mock recorder for MockDataService.
type MockDataServiceMockRecorder struct {
	mock *MockDataService
}

// NewMockDataService creates a new mock instance.
func NewMockDataService(ctrl *gomock.Controller) *MockDataService {
	mock := &MockDataService{ctrl: ctrl}
	mock.recorder = &MockDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataService) EXPECT() *MockDataServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataService) Create(dt model.DataTypeable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataServiceMockRecorder) Create(dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataService)(nil).Create), dt)
}

// MockSyncerService is a mock of SyncerService interface.
type MockSyncerService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerServiceMockRecorder
}

// MockSyncerServiceMockRecorder is the mock recorder for MockSyncerService.
type MockSyncerServiceMockRecorder struct {
	mock *MockSyncerService
}

// NewMockSyncerService creates a new mock instance.
func NewMockSyncerService(ctrl *gomock.Controller) *MockSyncerService {
	mock := &MockSyncerService{ctrl: ctrl}
	mock.recorder = &MockSyncerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncerService) EXPECT() *MockSyncerServiceMockRecorder {
	return m.recorder
}

// RunWithStatus mocks base method.
func (m *MockSyncerService) RunWithStatus() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunWithStatus")
}

// RunWithStatus indicates an expected call of RunWithStatus.
func (mr *MockSyncerServiceMockRecorder) RunWithStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithStatus", reflect.TypeOf((*MockSyncerService)(nil).RunWithStatus))
}

// ServerHealthErr mocks base method.
func (m *MockSyncerService) ServerHealthErr() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerHealthErr")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerHealthErr indicates an expected call of ServerHealthErr.
func (mr *MockSyncerServiceMockRecorder) ServerHealthErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerHealthErr", reflect.TypeOf((*MockSyncerService)(nil).ServerHealthErr))
}
